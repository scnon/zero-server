package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"

	"github.com/scnon/zero-server/apps/merchant/api/graph"
	"github.com/scnon/zero-server/apps/merchant/api/model"
	"github.com/scnon/zero-server/models"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, username string, nickname string) (*models.SysUser, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, username *string, nickname *string) (*models.SysUser, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// AssignRole is the resolver for the assignRole field.
func (r *mutationResolver) AssignRole(ctx context.Context, userID string, roleID string) (*models.SysUser, error) {
	panic(fmt.Errorf("not implemented: AssignRole - assignRole"))
}

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, name string) (*model.SysRole, error) {
	panic(fmt.Errorf("not implemented: CreateRole - createRole"))
}

// UpdateRole is the resolver for the updateRole field.
func (r *mutationResolver) UpdateRole(ctx context.Context, id string, name *string) (*model.SysRole, error) {
	panic(fmt.Errorf("not implemented: UpdateRole - updateRole"))
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
